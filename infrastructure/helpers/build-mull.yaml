---
- name: Clone Mull's sources
  git:
    repo: "{{ repo_url }}"
    dest: "{{ source_dir }}"
    version: "{{ gitref }}"

- name: Create Build Directory (Debug)
  file:
    path: "{{ debug_build_dir }}"
    state: directory

- name: Prepare Build System (Debug)
  command: cmake -G Ninja -DPATH_TO_LLVM={{ llvm_dir }} -DCMAKE_CXX_FLAGS="{{ mull_cxx_flags }}" {{ source_dir }}
  args:
    chdir: "{{ debug_build_dir }}"
    creates: "{{ debug_build_dir }}/CMakeCache.txt"
  environment:
    CC: "{{ llvm_dir }}/bin/clang"
    CXX: "{{ llvm_dir }}/bin/clang++"

- name: Build Mull (Debug)
  command: ninja all
  args:
    chdir: "{{ debug_build_dir }}"

- name: Build Tests (Debug)
  command: ninja mull-tests
  args:
    chdir: "{{ debug_build_dir }}"

- name: Run Tests (Debug)
  command: "{{ debug_build_dir}}/tests/mull-tests"

- name: Create Build Directory (Release)
  file:
    path: "{{ release_build_dir }}"
    state: directory

- name: Prepare Build System (Release)
  command: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DPATH_TO_LLVM={{ llvm_dir }} -DCMAKE_CXX_FLAGS="{{ mull_cxx_flags }}" {{ source_dir }}
  args:
    chdir: "{{ release_build_dir }}"
    creates: "{{ release_build_dir }}/CMakeCache.txt"
  environment:
    CC: "{{ llvm_dir }}/bin/clang"
    CXX: "{{ llvm_dir }}/bin/clang++"

- name: Build Mull (Release)
  command: ninja all
  args:
    chdir: "{{ release_build_dir }}"

- name: Build Tests (Release)
  command: ninja mull-tests
  args:
    chdir: "{{ release_build_dir }}"

- name: Run Tests (Release)
  command: "{{ release_build_dir}}/tests/mull-tests"

- name: Install Mull (Release)
  command: ninja install
  args:
    chdir: "{{ release_build_dir }}"
  become: true

- name: Prepare Package (Release)
  command: ninja package
  args:
    chdir: "{{ release_build_dir }}"
  become: true
  when: not skip_package

- name: Copy package file name
  fetch:
    src: "{{ release_build_dir }}/PACKAGE_FILE_NAME"
    dest: PACKAGE_FILE_NAME
    flat: true
  when: not skip_package

- name: Copy package to the local machine
  fetch:
    src: "{{ release_build_dir }}/{{ lookup('file', 'PACKAGE_FILE_NAME') }}.{{ item }}"
    dest: "packages/{{ lookup('file', 'PACKAGE_FILE_NAME') }}.{{ item }}"
    flat: true
  with_items: "{{ package_extensions }}"
  when: not skip_package

- name: Print Mull version
  command: mull-cxx -version
  args:
    chdir: "{{ release_build_dir }}"

